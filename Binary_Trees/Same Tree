// Iterative

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        Queue<TreeNode> queueP = new LinkedList<>();
        Queue<TreeNode> queueQ = new LinkedList<>();

        queueP.offer(p);
        queueQ.offer(q);

        while (!queueP.isEmpty() && !queueQ.isEmpty()) {
            TreeNode currentP = queueP.poll();
            TreeNode currentQ = queueQ.poll();

            if(currentP == null && currentQ == null){
                continue;
            }
            
            if(currentP == null || currentQ == null || currentP.val != currentQ.val){
                return false;
            }


            queueP.offer(currentP.left);
            queueQ.offer(currentQ.left);
            queueP.offer(currentP.right);
            
            queueQ.offer(currentQ.right);
            }

            return queueP.isEmpty() && queueQ.isEmpty();

    }
}


// RECURSIVE



class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        // Base case: If both trees are empty, they are identical.
        if (p == null && q == null) {
            return true;
        }
        // If one of the trees is empty and the other is not, they are not identical.
        if (p == null || q == null) {
            return false;
        }
        
        // Compare the values of the current nodes.
        if (p.val != q.val) {
            return false;
        }
        
        // Recursively check the left and right subtrees.
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }    
}
