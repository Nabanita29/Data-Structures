// RECURSIVE

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<>();
        return helper (list, root);
    }

    public ArrayList helper(ArrayList list, TreeNode root){
        if (root == null) {
            return list;
        }
        list.add(root.val);
        helper(list, root.left);
        helper(list, root.right);
        return list;
    }

}

// ITERATIVE

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<>();
        ArrayList<Integer> result = new ArrayList<>();

        if (root == null) {
            return result;
        }

        stack.push(root);

        while (!stack.isEmpty()){
            TreeNode current = stack.pop();
            result.add(current.val);

            if (current.right != null) {
                stack.push(current.right);
            }

            if (current.left != null) {
                stack.push(current.left);
            }
        }

        return result;


    }
}
