// RECURSIVE

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<>();
        helper(list, root);
        return list;
    }

    public void helper(ArrayList list, TreeNode root){
        if (root == null){
            return;
        }

        helper(list, root.left);
        helper(list, root.right);
        list.add(root.val);

    }
}

// USING TWO STACKS
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        ArrayList<Integer> result = new ArrayList<>();
        if(root == null){
            return result;
        }
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);

        while (!stack.isEmpty()){
            TreeNode current = stack.pop();
            result.add(0, current.val);
            if (current.left != null){
                stack.push(current.left);

            }
            if (current.right != null){
                stack.push(current.right);

            }
            
           
        }

        return result;

    }
}
