// RECURSION
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        helper(result, root, 0);
        return result;
    }
        private void helper(List<List<Integer>> result, TreeNode root, int level ){
            if (root == null){
                return ;
            }
            // If the current level list does not exist, create it
            if (result.size() <= level) {
            result.add(new ArrayList<>());
            }

            result.get(level).add(root.val);

            helper(result, root.left, level + 1);
            helper(result, root.right, level + 1);
        }

    }

// ITERATIVE

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> wrapList = new ArrayList<>();

        if (root == null) {
            return wrapList;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>();

            for (int i = 0; i < levelSize; i++) {
                TreeNode current = queue.poll();
                currentLevel.add(current.val);

                if (current.left != null) {
                    queue.offer(current.left);
                }

                if (current.right != null) {
                    queue.offer(current.right);
                }
            }

            wrapList.add(currentLevel);
        }

        return wrapList;
    }
}
