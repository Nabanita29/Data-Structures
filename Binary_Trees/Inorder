// THE ITERATIVE SOLUTION THAT USED STACK

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> result = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode current = root;

        while (current != null || !stack.isEmpty()) {
            if (current != null) {
                stack.push(current);
                current = current.left;
            } else {
                current = stack.pop();
                result.add(current.val);
                current = current.right;
            }
        }

        return result;
    }
}

// THE RECURSIVE SOLUTION THAT USED RECURSION


class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<>();
        return helper(list, root);
    }

// This part defines a class called "Solution" with a method called "inorderTraversal." 
// The method takes a TreeNode named "root" as an input and aims to perform an in-order traversal of the binary tree.

        public ArrayList<Integer> helper(ArrayList list, TreeNode root){
            if(root == null){
                return list;
            }
            helper(list, root.left);
            list.add(root.val);
            helper(list, root.right);
            return list;

    }
}


