class Solution {
    public int smallestDivisor(int[] nums, int threshold) {
        int low = 1; 
        int high = FindMax(nums);
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (FindSum(nums, mid) <= threshold) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return low;
    }

    private int FindMax(int[] nums) {
        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        return max;
    }

    private int FindSum(int[] nums, int divisor) {
        int sum = 0;
        for (int num : nums) {
            // Round up to the nearest integer
            sum += (int) Math.ceil((double) num / divisor);
        }
        return sum;
    }
}
